{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Workflow","text":"<pre><code>\nflowchart LR\n    subgraph ETL[Pipeline]\n        A(M\u00faltiplos Arquivos Excel) --&gt; B[Extract: extract_from_excel]\n        B --&gt; |Gera uma lista de Dataframes| C[Transformation: concatenate_dataframes]\n        C --&gt; |Gera um Dataframe consolidado| D[Load: converte_para_excel]\n        D --&gt; |Salva o consolidado em Excel| E[Pasta Output: um arquivo \u00fanico Excel]\n    end</code></pre>"},{"location":"#funcao-de-transformacao-de-dados","title":"Fun\u00e7\u00e3o de transforma\u00e7\u00e3o de dados","text":"<p>L\u00ea arquivos e retorna um dataframe</p> <p>args: input_path(str): caminho da pasta com os arquivos</p> <p>return: lista de dataframes</p> Source code in <code>pipeline\\extract.py</code> <pre><code>def extract_from_excel(path: str) -&gt; List[pd.DataFrame]:\n    \"\"\"\n    L\u00ea arquivos e retorna um dataframe\n\n    args: input_path(str): caminho da pasta com os arquivos\n\n    return: lista de dataframes\n\n    \"\"\"\n    all_files = glob.glob(os.path.join(path, '*.xlsx'))\n\n    dataframe_list = []\n\n    for file in all_files:\n        dataframe_list.append(pd.read_excel(file))\n\n    return dataframe_list\n</code></pre>"}]}